package com.assignment.controller;

import com.assignment.exception.ResourceNotFoundException;
import com.assignment.model.Stock;
import com.assignment.service.StockService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import java.util.List;

@RestController
@RequestMapping("/api/stocks")
@Tag(name="stock", description = "Rest API to support create, read, patch and delete operations on stocks")
public class StockController {

    @Autowired
    private StockService stockService;

    /**
     *
     * @param stock
     * @return
     */
    @Operation(summary = "Add a new stock", description = "Adds stock details with autogenerated identifier and last updated timestamp")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "successful operation"),
            @ApiResponse(responseCode = "400", description = "Invalid input") })
    @PostMapping(consumes = { "application/json"})
    @ResponseStatus(HttpStatus.CREATED)
    public ResponseEntity<Stock> create(@RequestBody Stock stock){
        return new ResponseEntity<Stock>(stockService.saveStock(stock),HttpStatus.CREATED);
    }

    @Operation(summary = "Update the stock's current price", description = "Update the current price of stock")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "successful operation"),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "404", description = "Stock not found") })
    @PatchMapping(value = "/{id}", consumes = { "application/json"})
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<Stock> update(
            @Parameter(description="Id of the stock. Cannot be empty.", required=true)
            @PathVariable(value="id") Long id,
            @Validated @RequestBody Stock stock){

        try {
            return new ResponseEntity<Stock>(stockService.updateStock(id, stock),HttpStatus.OK);
        } catch (ResourceNotFoundException e) {
            throw new ResponseStatusException(
                    HttpStatus.NOT_FOUND, "Stock Not Found", e);
        }

    }

    @Operation(summary = "Find all available stocks", description = "returns all existing stock details")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "successful operation",
                    content = @Content(array = @ArraySchema(schema = @Schema(implementation = Stock.class)))) })
    @GetMapping(produces = { "application/json" })
    public List<Stock> getAll(){
        return stockService.getAllStocks();
    }


    @Operation(summary = "Get a stock by id", description = "returns stock details for given identifier")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "successful operation",
                    content = @Content(schema = @Schema(implementation = Stock.class))),
            @ApiResponse(responseCode = "404", description = "Stock not found") })
    @GetMapping(value = "/{id}")
    public ResponseEntity<Stock> findById(
            @Parameter(description="Id of the stock. Cannot be empty.", required=true)
            @PathVariable("id") Long id){
        try {
            return new ResponseEntity<Stock>(stockService.getStockById(id),HttpStatus.OK);
        } catch (ResourceNotFoundException e) {
            throw new ResponseStatusException(
                    HttpStatus.NOT_FOUND, "Stock Not Found", e);
        }
    }

    @Operation(summary = "Delete a stock", description = "deletes the stock details for given identifier")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "successful operation"),
            @ApiResponse(responseCode = "404", description = "Stock not found") })
    @DeleteMapping (value = "/{id}")
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<String> delete(
            @Parameter(description="Id of the stock. Cannot be empty.", required=true)
            @PathVariable("id") Long id) {
        try {
            stockService.deleteStock(id);
            return new ResponseEntity<String>("Deleted",HttpStatus.OK);
        } catch (ResourceNotFoundException e) {
            throw new ResponseStatusException(
                    HttpStatus.NOT_FOUND, "Stock Not Found", e);
        }

    }



}
